{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "console.log(1)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "1",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// Please install OpenAI SDK first: `npm install openai`\n\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  baseURL: \"https://api.deepseek.com\",\n  apiKey: \"sk-7737ca4e64cc4cd09f95fb742f2af5c1\",\n});\n\nasync function dsllm(message) {\n  const completion = await openai.chat.completions.create({\n    messages: [{ role: \"system\", content: message }],\n    model: \"deepseek-chat\",\n  });\n\n  return completion.choices[0].message.content\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "console.log(await dsllm('hi'))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Hello! How can I assist you today?",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "await dsllm(\"hi\")"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'Hello! How can I assist you today?'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "dsllm(\"如何取得JavaScript异步函数的返回值\")"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "在JavaScript中，异步函数的返回值通常是通过回调函数、Promise、或者`async/await`语法来处理的。以下是几种常见的方法：",
                                "",
                                "### 1. 使用回调函数",
                                "回调函数是最传统的处理异步操作结果的方式。你可以将一个函数作为参数传递给异步函数，当异步操作完成时，该函数会被调用并传递结果。",
                                "",
                                "```javascript",
                                "function fetchData(callback) {",
                                "    setTimeout(() => {",
                                "        const data = \"Some data\";",
                                "        callback(data);",
                                "    }, 1000);",
                                "}",
                                "",
                                "fetchData((result) => {",
                                "    console.log(result); // 输出: Some data",
                                "});",
                                "```",
                                "",
                                "### 2. 使用 Promise",
                                "Promise 是现代 JavaScript 中处理异步操作的标准方式。你可以通过 `.then()` 和 `.catch()` 方法来处理异步操作的结果和错误。",
                                "",
                                "```javascript",
                                "function fetchData() {",
                                "    return new Promise((resolve, reject) => {",
                                "        setTimeout(() => {",
                                "            const data = \"Some data\";",
                                "            resolve(data);",
                                "        }, 1000);",
                                "    });",
                                "}",
                                "",
                                "fetchData().then((result) => {",
                                "    console.log(result); // 输出: Some data",
                                "}).catch((error) => {",
                                "    console.error(error);",
                                "});",
                                "```",
                                "",
                                "### 3. 使用 async/await",
                                "`async/await` 是基于 Promise 的语法糖，使得异步代码看起来更像同步代码。你可以使用 `await` 关键字来等待一个 Promise 的完成，并直接获取其结果。",
                                "",
                                "```javascript",
                                "function fetchData() {",
                                "    return new Promise((resolve, reject) => {",
                                "        setTimeout(() => {",
                                "            const data = \"Some data\";",
                                "            resolve(data);",
                                "        }, 1000);",
                                "    });",
                                "}",
                                "",
                                "async function getData() {",
                                "    try {",
                                "        const result = await fetchData();",
                                "        console.log(result); // 输出: Some data",
                                "    } catch (error) {",
                                "        console.error(error);",
                                "    }",
                                "}",
                                "",
                                "getData();",
                                "```",
                                "",
                                "### 4. 使用 Promise.all 处理多个异步操作",
                                "如果你有多个异步操作，并且希望在所有操作完成后获取结果，可以使用 `Promise.all`。",
                                "",
                                "```javascript",
                                "function fetchData1() {",
                                "    return new Promise((resolve) => {",
                                "        setTimeout(() => resolve(\"Data 1\"), 1000);",
                                "    });",
                                "}",
                                "",
                                "function fetchData2() {",
                                "    return new Promise((resolve) => {",
                                "        setTimeout(() => resolve(\"Data 2\"), 1500);",
                                "    });",
                                "}",
                                "",
                                "Promise.all([fetchData1(), fetchData2()]).then((results) => {",
                                "    console.log(results); // 输出: [\"Data 1\", \"Data 2\"]",
                                "}).catch((error) => {",
                                "    console.error(error);",
                                "});",
                                "```",
                                "",
                                "### 总结",
                                "- **回调函数**：适用于简单的异步操作，但容易导致回调地狱。",
                                "- **Promise**：现代 JavaScript 的标准方式，支持链式调用和错误处理。",
                                "- **async/await**：基于 Promise 的语法糖，使异步代码更易读和维护。",
                                "- **Promise.all**：适用于同时处理多个异步操作。",
                                "",
                                "根据你的需求选择合适的方法来处理异步函数的返回值。",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}